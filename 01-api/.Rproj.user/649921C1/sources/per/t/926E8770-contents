---
title: "Belajar WebAPI BPS"
author: "Rexevan"
format: html
---

## Pendahuluan

Okay,jadi beberapa minggu lalu saya belajar mengenai WebAPI BPS. Belajar WebAPI supaya bisa menarik data lebih baik, bukan untuk membuat suatu aplikasi. *I'm a data analyst, not a software engineer*. Lalu, saya menemukan paket `bpsr`, yang bisa dipakai untuk menggunakan WebAPI BPS langsung dari R. Sehingga pembelajaran khusus tentang `bpsr` akan saya taruh di `04-bpsr` sementara untuk `01-api` ini saya pakai untuk belajar membuat fungsi-fungsi yang sekiranya belum ada di paket `bpsr`.

## mengatur variabel WebApi_KEY

Hal pertama yang perlu di lakukan adalah

-   Kunjungi situs web [PST BPS](pst.bps.go.id),
-   *scroll* ke bawah, sampai ketemu tautan untuk mendapatkan akses Web API BPS,
-   *login* (atau *sign up* jika belum punya akun),
-   *Copy* Web API BPS (atau buatkan jika belum punya),
-   Jalankan perintah dibawah ini

```{r}
source("script/00-set-key.R")
bps_set_key()
```

-   *Paste*

## Tabel Dinamis

Khusus fungsi R untuk mendapatkan tabel dinamis, fungsi-fungsi ini dibuat **sebelum** saya menemukan dengan paket `bpsr`. Untuk pencarian langsung dari R, lebih baik pakai paket `bpsr`.

Fungsi ini dipakai ketika kita ke situs web BPS lalu secara manual pilih **JSON** di tabel dinamis.

```{r}
source("script/03-bikin-fungsi.R")

link <- "https://webapi.bps.go.id/v1/api/list/model/data/lang/ind/domain/5310/var/100/key/WebAPI_KEY"
bps_dt_get(Endpoint_WebAPI = link)
```

Oke, sepertinya berhasil untuk ambil 1 jenis tabel. dsa Sekarang mari coba untuk beberapa tabel. Coba ambil angka inflasi kota-kota se Indonesia berdasarkan sub kelompok, mulai dari [sub kelompok 1](https://www.bps.go.id/id/statistics-table/2/MjI1MCMy/inflasi-tahunan--y-on-y---2022-100--menurut-kelompok-dan-sub-kelompok-01-makanan--minuman-dan-tembakau.html) s.d. [sub kelompok 11](https://www.bps.go.id/id/statistics-table/2/MjI2MCMy/inflasi-tahunan--y-on-y---2022-100--menurut-kelompok-dan-sub-kelompok-11-perawatan-pribadi-dan-jasa-lainnya.html)

```{r}
library(tidyverse)

get_data_json <- function(get_url) {
    library(tidyverse)
    library(magrittr)
    y <- get_url %$%
        content |>
        rawToChar() |> 
        jsonlite::fromJSON(flatten = TRUE)
    
    return(y)
}


tbl_url <- tibble(a = 2250:2260) |>
    transmute(
        url = paste0("https://webapi.bps.go.id/v1/api/list/model/data/lang/ind/domain/0000/var/", a,"/key/", Sys.getenv("WebAPI_KEY"))
    ) |>
    transmute(
        get_url = map(url, \(x) httr::GET(x))
    ) |>
    mutate(
        get_data = map(get_url, \(x) get_data_json(x))
    )

tbl_url

tbl_data <- tbl_url |> 
    transmute(
        tabular_data = map(get_data, \(x) bps_dt_list2tbl(x))
    ) |>
    unnest(cols = tabular_data)

tbl_data

# write_rds(tbl_data, "output/rds/02-inflasi-y-on-y-per-sub-kelompok-per-kota.rds")

```

## SIMDASI

Ini adalah layanan API untuk mendapatkan data dari SIMDASI. Web SIMDASI sendiri hanya bisa dibuka menggunakan VPN, dan perlu akun SIMDASI (bukan akun SSO BPS).

Dalam d

```{r}
source("script/fun-simdasi.R")
```


### DDA

```{r}
# Daftar Tabel DDA yang tersedia di SIMDASI
# SIMDASI Master Table
# bps_simdasi_dda()

tbl_dda_simdasi <- bps_simdasi_dda()

tbl_dda_simdasi

## Coba lihat tabel-tabel SIMDASI untuk DDA BPS Kabupaten/Kota -----------------

tbl_dda_simdasi_kab <- tbl_dda_simdasi |>
    filter(!is.na(kode_tabel_kabkota)) 
```

### KCDA

```{r}
# bps_simdasi_kcda()
tbl_kcda_master <- bps_simdasi_kcda(kode_satker = "5310")

tbl_kcda_master
```


### Akses Tabel DDA dan KCDA

```{r}
# bps_simdasi_tabel()
tbl_list <- bps_simdasi_tabel(kode_satker = 5310, tahun = 2023, id_tabel = "UFpWMmJZOVZlZTJnc1pXaHhDV1hPQT09") |>
    slice(2) |>
    tibble()
```


```{r}
tbl_data <- tbl_list |> 
    select(data) |> 
    unnest(cols = data)

tbl_keterangan <- tbl_list |> 
    select(contains("keterangan_data")) |>
    pivot_longer(cols = contains("keterangan"), names_to = "simbol", values_to = "keterangan") |>
    mutate(simbol = str_remove(simbol, "keterangan_data\\."))
    
tbl_variabel <- tbl_list |> 
    select(contains("nama_variabel")) |>
    pivot_longer(cols = contains("kolom"), names_to = "simbol", values_to = "keterangan") |>
    separate(col = simbol, into = c("kolom", "id_variabel", "akhir"), sep = "\\.") |>
    pivot_wider(names_from = akhir, values_from = keterangan)

## 1 baris untuk 1 variabel

bps_simdasi_tbl_list2tidy <- function(tbl_list, nama_kolom) {
    
    tbl_tidy <-
        tbl_list |> 
        select(contains(nama_kolom)) |>
        pivot_longer(cols = contains(nama_kolom)) |>
        separate(col = name, into = c("kolom", "id_variabel", "kolom3"), sep = "\\.") |>
        pivot_wider(names_from = kolom3, values_from = value) |>
        select(-kolom)
        
     return(tbl_tidy)
}

tbl_list |>
    bps_simdasi_tbl_list2tidy("angka_desimal_dibelakang_koma")

tbl_metadata <- tbl_list |> 
    select(contains("metadata")) |>
    pivot_longer(cols = contains("metadata")) |>
    separate(col = name, into = c("kolom", "id_variabel", "kolom3"), sep = "\\.") |>
    pivot_wider(names_from = kolom3, values_from = value)

tbl_metadata


tbl_tipe <- tbl_list |>
    select(contains("tipe")) |>
    pivot_longer(cols = contains("tipe")) |>
    separate(col = name, into = c("kolom", "id_variabel", "kolom3"), sep = "\\.") |>
    pivot_wider(names_from = kolom3, values_from = value)

tbl_angka_desimal <- tbl_list |>
    select(contains("angka_desimal")) |>
    pivot_longer(cols = contains("angka_desimal")) |>
    separate(col = name, into = c("kolom", "id_variabel", "kolom3"), sep = "\\.") |>
    pivot_wider(names_from = kolom3, values_from = value)

tbl_angka_desimal

tbl_tgl_cut_off <- tbl_list |>
    select(contains("tanggal_cut_off"))

tbl_satuan <- tbl_list |>
    select(contains("satuan"))


names(tbl_kolom) |>
    str_remove("nama_variabel.*") |>
    str_remove("metadata.*") |>
    str_remove("tipe") |>
    str_remove("angka_desimal.*") |>
    str_remove("satuan.*") |>
    str_remove("tanggal_cut_off")
```


## Sensus
