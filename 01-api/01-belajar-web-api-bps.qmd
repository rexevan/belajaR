---
title: "Belajar WebAPI BPS"
author: "Rexevan"
format: html
---

## Pendahuluan

Okay,jadi beberapa minggu lalu saya belajar mengenai WebAPI BPS. Belajar WebAPI supaya bisa menarik data lebih baik, bukan untuk membuat suatu aplikasi. *I'm a data analyst, not a software engineer*. Lalu, saya menemukan paket `bpsr`, yang bisa dipakai untuk menggunakan WebAPI BPS langsung dari R. Sehingga pembelajaran khusus tentang `bpsr` akan saya taruh di `04-bpsr` sementara untuk `01-api` ini saya pakai untuk belajar membuat fungsi-fungsi yang sekiranya belum ada di paket `bpsr`.

## mengatur variabel WebApi_KEY

Hal pertama yang perlu di lakukan adalah

-   Kunjungi situs web [PST BPS](pst.bps.go.id),
-   *scroll* ke bawah, sampai ketemu tautan untuk mendapatkan akses Web API BPS,
-   *login* (atau *sign up* jika belum punya akun),
-   *Copy* Web API BPS (atau buatkan jika belum punya),
-   Jalankan perintah dibawah ini

```{r}
source("script/00-set-key.R")

Sys.getenv("WebAPI_KEY")
bps_set_key()
```

-   *Paste*

## Tabel Dinamis (`bps_dt_`)

Khusus fungsi R untuk mendapatkan tabel dinamis, fungsi-fungsi ini dibuat **sebelum** saya menemukan dengan paket `bpsr`. Untuk pencarian langsung dari R, lebih baik pakai paket `bpsr`.

Fungsi ini dipakai ketika kita ke situs web BPS lalu secara manual pilih **JSON** di tabel dinamis.

```{r}
source("script/fun-dynamic-table.R")

link <- "https://webapi.bps.go.id/v1/api/list/model/data/lang/ind/domain/5300/var/1674/key/WebAPI_KEY"
bps_dt_get(Endpoint_WebAPI = link) |>
    #filter(vervar_label == "Sikka") |>
    #select(isi_konten, ends_with("_label")) |>
    mutate(turvar_label = turvar_label |> str_squish()) |>
    arrange(tahun_val, vervar_val) |>
    select(isi_konten, vervar_label, turvar_label, tahun_label) |>
    pivot_wider(names_from = turvar_label,  values_from = isi_konten) |>
    filter(tahun_label == "2023")
```

Oke, sepertinya berhasil untuk ambil 1 jenis tabel. dsa Sekarang mari coba untuk beberapa tabel. Coba ambil angka inflasi kota-kota se Indonesia berdasarkan sub kelompok, mulai dari [sub kelompok 1](https://www.bps.go.id/id/statistics-table/2/MjI1MCMy/inflasi-tahunan--y-on-y---2022-100--menurut-kelompok-dan-sub-kelompok-01-makanan--minuman-dan-tembakau.html) s.d. [sub kelompok 11](https://www.bps.go.id/id/statistics-table/2/MjI2MCMy/inflasi-tahunan--y-on-y---2022-100--menurut-kelompok-dan-sub-kelompok-11-perawatan-pribadi-dan-jasa-lainnya.html)

```{r}
library(tidyverse)

get_data_json <- function(get_url) {
    library(tidyverse)
    library(magrittr)
    y <- get_url %$%
        content |>
        rawToChar() |> 
        jsonlite::fromJSON(flatten = TRUE)
    
    return(y)
}


tbl_url <- tibble(a = 2250:2260) |>
    transmute(
        url = paste0("https://webapi.bps.go.id/v1/api/list/model/data/lang/ind/domain/0000/var/", a,"/key/", Sys.getenv("WebAPI_KEY"))
    ) |>
    transmute(
        get_url = map(url, \(x) httr::GET(x))
    ) |>
    mutate(
        get_data = map(get_url, \(x) get_data_json(x))
    )

tbl_url

tbl_data <- tbl_url |> 
    transmute(
        tabular_data = map(get_data, \(x) bps_dt_list2tbl(x))
    ) |>
    unnest(cols = tabular_data)

tbl_data

# write_rds(tbl_data, "output/rds/02-inflasi-y-on-y-per-sub-kelompok-per-kota.rds")

```

## SIMDASI

Ini adalah layanan API untuk mendapatkan data dari SIMDASI. Web SIMDASI sendiri hanya bisa dibuka menggunakan VPN, dan perlu akun SIMDASI (bukan akun SSO BPS).

Dalam d

```{r}
library(tidyverse)
source("script/fun-simdasi.R")
```


### Tabel DDA dan KCDA yang tersedia di SIMDASI 

```{r}
# Daftar Tabel DDA yang tersedia di SIMDASI
# SIMDASI Master Table
# bps_simdasi_dda()

tbl_dda_simdasi <- bps_simdasi_dda()

tbl_dda_simdasi

tbl_kcda_master <- bps_simdasi_kcda(kode_wilayah = "5310000")


```

### Akses Tabel DDA dan KCDA

```{r}
# bps_simdasi_tabel()

tbl_list <- 
    bps_simdasi_tabel(
        tahun = 2023, 
        id_tabel = tbl_kcda_master$id_tabel[19],
        kode_wilayah = "5310000"
        ) |>
    slice(2) |>
    tibble()
```

## Data Wrangling



```{r broom-like}
names(tbl_list)


## tidy : 1 baris per variabel

bps_simdasi_list_tidy <- function(x) {
    if(!is.list(x)){stop("x harus memiliki class list")}
    tbl_tidy <-     
        x |> 
        select(starts_with("kolom.")) |> 
        mutate(across(.cols = everything(), .fns = ~ list(.x))) |> 
        pivot_longer(cols = everything()) |> 
        separate(col = name, into = c("txt_kolom", "variabel", "kolom3"), sep = "\\.") |> 
        pivot_wider(names_from = kolom3, values_from = value) |> 
        mutate(across(.cols = nama_variabel:angka_desimal_dibelakang_koma, .fns = ~ unlist(.x))) |> 
        select(-txt_kolom)
    
    return(tbl_tidy)

}

tbl_data_tidy <- bps_simdasi_list_tidy(tbl_list)

## keterangan : huh....

bps_simdasi_list_ket <- function(x) {
    
    if(!is.list(x)){stop("x harus memiliki class list")}
    
    tbl_keterangan <- 
        x |> 
        select(contains("keterangan_data")) |>
        pivot_longer(cols = contains("keterangan"), names_to = "simbol", values_to = "keterangan") |>
        mutate(simbol = str_remove(simbol, "keterangan_data\\."))
    
    return(tbl_keterangan)
}

tbl_data_ket <- bps_simdasi_list_ket(tbl_list)

## glance : 1 baris = 1 tabel

bps_simdasi_list_glance <- function(x) {
    
    if(!is.list(x)){stop("x harus memiliki class list")}
    
    tbl_glance <- 
        x |> 
        select(!starts_with("keterangan_data") & !starts_with("kolom."))
    
    return(tbl_glance)
}

tbl_data_glance <- bps_simdasi_list_glance(tbl_list)

## augment : 1 baris = 1 obersasi (kecamatan/desa)

bps_simdasi_list_augment <- function(x) {
    
    if(!is.list(x)){stop("x harus memiliki class list")}

    tbl_augment <- 
        x |> 
        bps_simdasi_list_glance() |>
        select(data) |> 
        unnest(data) |>
        select(label:kode_wilayah, starts_with("variables.")) |>
        pivot_longer(cols = starts_with("variables.")) |>
        separate(col = name, into = c("txt_variabel", "variabel", "kolom3"), sep = "\\.") |>
        pivot_wider(names_from = kolom3, values_from = value) |>
        select(-txt_variabel)

    return(tbl_augment)
}

tbl_augment <- bps_simdasi_list_augment(tbl_list) 



bps_simdasi_list_augment(tbl_list) |>
    left_join(
        bps_simdasi_list_tidy(tbl_list),
        join_by(variabel)
    ) |>
    View()

tbl_list_tidy    <- tbl_list |> bps_simdasi_list_tidy()
tbl_list_glance  <- tbl_list |> bps_simdasi_list_glance()
tbl_list_augment <- tbl_list |> bps_simdasi_list_augment()

tbl_list_augment |>
    left_join(tbl_list_tidy, join_by(variabel))
```



## Sensus
